#!/usr/bin/env ruby
# This intentionally simple to comprehend script acts as the current Ruby On Go CLI.
# Run "rog" in the command line to see available options.

require 'benchmark'
require 'yaml'
require 'toml'
require 'fileutils'
require 'pathname'
require_relative '../lib/rubyongo/paths'
require_relative '../lib/rubyongo/archetyper'

# gem source path
@gem_path = ::File.expand_path(::File.dirname(__FILE__))

# just read two arguments (we will do full option parsing later)
$:.unshift @gem_path
@command  = ARGV[0]
@name     = ARGV[1] if ARGV.length > 0

# read deploy username and domain
@rog_usr = nil
@rog_host = nil
if ARGV.length > 1
  @rog_usr  = ARGV[2]
  @rog_host = ARGV[3] if ARGV.length > 2

  # Conventionally, defaults come from the Name argument:
  # Name=rubyongo.org => DomainUsername: rubyongo, DomainHost: rubyongo.org
  # Name=rubyongo => DomainUsername: rubyongo, DomainHost: rubyongo.shop
  @rog_usr  ||= @name.split('.').first
  @rog_host ||= @name =~ /\./ ? @name : "#{@name}.shop"
end

# code generation path, where to put generated files
# just take the current folder for now
@gen_path = Dir.pwd

# working path
@working_path = @gen_path

# load rubyongo
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)
require "rubyongo/version"

version = ::Rubyongo.version

USAGE = <<-EOF
#
# Welcome to #{'RubyOnGo'.dark_blue} v#{version}
#
# This software is intended to help you with everyday webshop building.
#
# Use it as you #{'dodo'.green}.
#

Usage:

  rog new Name.ext [DeployUsername DeployDomainHost]     # generates a new webshop in the current folder, pass usr and host for custom deployment credentials (default: usr: Name, host: Name.ext)
  rog start                                              # starts the Panel backend (rackup) at localhost:9393
  rog hugo                                               # starts the Hugo development server at localhost:1313
  rog init                                               # automated deployment pipeline installation
  rog equip                                              # run sys playbooks on the remote (installs go, hugo, libs, etc.)
  rog deploy                                             # deploys code and publishes site
  rog content                                            # deploys content and publishes site
  rog upgrade Name.ext [DeployUsername DeployDomainHost] # upgrade framework to the current gem version
  rog gemversion                                         # show the current gem version
  rog version                                            # show the currently installed rog version (which gem version was used to create the current app)

One can use the first letter of any of the above commands to shortcut, example: 'rog s' to serve the Panel, 'rog h' to run Hugo server for the static.

When the theme contains a 'svelte' folder with a Svelte app inside, use the following:

  rog rollup    # builds svelte code
  rog rollupdev # starts svelte code reloading (use this with: 'rog hugo') and also serves svelte app standalone on localhost:5000

Updating an existing projects theme:

  rog themeupdate # updates the theme from the gem (an alternative to a full upgrade)

Good luck!

EOF

def print_backtrace(exception)
  exception.backtrace.join("\n\t").to_s.blue
end

def print_usage
  puts USAGE
end

def set_env
  if @name == '--production'
    ENV['RACK_ENV'] = :production.to_s
  else
    ENV['RACK_ENV'] = :development.to_s
  end
end

def upgrading_settings
  if File.exists?("#{}/panel.yml")
    @settings ||= YAML.load_file('panel.yml')
  else
    print_usage
    "No panel.yml present in current folder. Did you run 'rog new'? Or 'rog init'?".say(:red)
    exit(1)
  end
end

def settings
  if File.exists?('panel.yml')
    @settings ||= YAML.load_file('panel.yml')
    # add Hugo settings
    if File.exists?('config.toml')
      @static_settings ||= TOML.load_file('config.toml')
      @settings = @settings.merge @static_settings
    end
  else
    print_usage
    "No panel.yml present in current folder. Did you run 'rog new'? Or 'rog init'?".say(:red)
    exit(1)
  end
end

def timestamp
  Time.now.to_i
end

# Generate a file by copying
def gen(to, *from)
  src = File.join(@gem_path, '..', *from)
  FileUtils.cp_r(src, to)
end

# Generate a file by copying and modifying some data along the way
def genmod(replacements, to, *from)
  src = File.join(@gem_path, '..', *from)
  content = File.read(src)
  replacements.each {|k, v| content.gsub!(/#{k}/, "#{v}")}

  # when copying a file to a directory, use the src's basename, else just copy to file
  dest_pathname = Pathname.new(to)
  destination   = dest_pathname.directory? ? File.join(to, File.basename(src)) : to

  File.open(destination, 'w') {|f| f.write content }
end

# Create rog folder with `hugo new site`
def generate_rog_dir(name, path)
  if Dir.exists?(path)
    "#{name} exists at #{path}.".say(:red)
    exit(1)
  else
    Rubyongo::Archetyper.run_cmd("hugo new site #{name}", "Created #{path}.")
  end
end

def modify_rog_dir(name, to_path, replacements={})
  if Dir.exists?(to_path)
    # Generate static generator paths
    gen(to_path, 'themes')

    # Generate Panel paths and populate with files
    gen(to_path, 'panel')
    gen(to_path, 'gen', 'Rakefile')
    gen(to_path, 'gen', 'test')
    gen(to_path, 'gen', 'config.ru')
    gen(to_path, 'gen', '.gitignore')
    gen(to_path, 'gen', 'data')
    gen(to_path, 'sys')
    gen(to_path, 'static')

    # Generate the Gemfile
    genmod(replacements, to_path, 'gen', 'Gemfile')

    #Generate Hugo config file
    genmod(replacements, to_path, 'gen', 'config.toml')

    # Generate Panel settings file
    genmod(replacements, to_path, 'gen', 'panel.yml')

    # Generate sys/host_vars settings
    to_file = File.join(to_path, 'sys', 'host_vars', "#{replacements['rog-host']}.yml")
    genmod(replacements, to_file, 'gen', 'sys', 'host_vars', 'example.com.yml')

    # Generate host lists for sys
    {"env.yml"     => File.join(to_path, 'sys', "env.yml"),
     "restart.yml" => File.join(to_path, 'sys', "restart.yml"),
      "rogs" => File.join(to_path, 'sys', "rogs")}.each do |filename, to_file|
      genmod(replacements, to_file, 'gen', 'sys', filename)
    end

    # Prepare archetype folders in content: content/item, content/post, content/project, content/page ...
    Rubyongo::Archetyper.create_content_structure(to_path)
    # Remove generated archetypes/default.md, to enable theme archetypes
    Rubyongo::Archetyper.enable_theme_archetypes(to_path)
  else
    "#{name} does not exist".say(:red)
    exit(1)
  end
end

def populate_local_git_repo(path)
  Rubyongo::Archetyper.run_cmd "cd #{path}; git init; git add .; git commit -am 'Add generated rog'", "Development and/or content git repository #{path}/.git."
end

def write_version_for(path)
  Rubyongo.write_version_for(path, Rubyongo.version)
end

def first_publish(path)
  Rubyongo::Archetyper.run_cmd "cd #{path}; hugo", "Published #{path}."
end

def ensure_gem(name, path)
  r = `gem list -ie #{name}`
  unless r =~ /true/
    "Missing #{name}, installing...".say(:red)
    `cd #{path}; gem install #{name}`
  end
end

def ensure_bundler_and_bundle(path)
  ensure_gem('bundler', path)
  Rubyongo::Archetyper.run_cmd "cd #{path}; bundle install", "Installed gems."
end

# Create a new rog site
def new_rog(name, settings = {}, upgrade = false)
  if name == nil || name == ""
    "Please supply a name for the webshop.".say(:red)
    return
  end
  path = File.join(@gen_path, name)
  generate_rog_dir(name, path) # run hugo new site
  modify_rog_dir(name, path, settings) # populate the generated site with rog
  first_publish(path) # publish the site to static generate the public folder for the first time (prevent an empty site)
  ensure_bundler_and_bundle(path) # check if bundler is installed, if not install it now, then bundle
  populate_local_git_repo(path) unless upgrade # set up an initial repo (but not when upgrading)
  write_version_for(path) # write the generator's version
  "Success".say(:green) unless upgrade
end

def copy_nonupgradeable(backup_path, path)
  # copy the .git folder
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, '.git')} .", "Copied git repo."

  # copy database
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'db.sqlite')} .", "Copied db."

  # copy sys/keys ~ if user changed something in other sys code, well, that's a non upgradeable for rog right now.
  # instead, one can manually copy from the upgrade-backup sys folder to restore any added functionality.
  # there has to be a better way to do this... tbc.
  Rubyongo::Archetyper.run_cmd "cd #{path}/sys; cp -r #{File.join(backup_path, 'sys', 'keys')} .", "Copied sys/keys."

  # copy sys/host_vars ~ any previously generated changes and new additions have to be copied.
  # these files help the rogster to upgrade go and hugo with "rog equip" by changing the host vars settings and running the equip cli command.
  Rubyongo::Archetyper.run_cmd "cd #{path}/sys; cp -ur #{File.join(backup_path, 'sys', 'host_vars')} .", "Copied sys/host_vars."

  # copy the content folder
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'content')} .", "Copied content."

  # copy data
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'data')} .", "Copied data."

  # copy archetypes added by framework user
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'archetypes')} .", "Copied archetypes."

  # copy panel
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'panel')} .", "Copied panel."

  # copy layouts
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'layouts')} .", "Copied layouts."

  # copy static
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'static')} .", "Copied static."

  # copy themes added by framework user
  themes_folders = Dir[File.join(backup_path, 'themes', '*')]
  themes_folders.delete_if {|folder| folder =~ /default/}
  themes_folders.each do |folder|
    Rubyongo::Archetyper.run_cmd "cd #{path}/themes; cp -r #{folder} .", "Copied themes."
  end

  # copy config.toml
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'config.toml')} old-config.toml", "Copied old config.toml."

  # copy panel.yml
  Rubyongo::Archetyper.run_cmd "cd #{path}; cp -r #{File.join(backup_path, 'panel.yml')} old-panel.yml", "Copied old panel.yml."
end

# Upgrading rog internals.
def upgrade_rog(name, settings = {})
  if name == nil || name == ""
    "Please supply the name of the webshop to upgrade.".say(:red)
    return
  end
  path = File.join(@gen_path, name)
  backup_path = File.join(@gen_path, "#{timestamp}-#{name}")

  # Making a copy of the entire project folder structure, spinpaintings.shop -> TIMESTAMP-spinpaintings.shop
  Rubyongo::Archetyper.run_cmd "mv #{path} #{backup_path}", "Backed up to #{backup_path}."

  # Creating a new rog with the same name
  new_rog(name, settings, upgrade = true)

  # Copying non-upgradeable files from the old project to the new
  copy_nonupgradeable(backup_path, path)

  #exec("cd sys; ./rogequip #{usr} #{host}")
  "Success #{backup_path}".say(:green)
end

# Updating a rog install theme
def themeupdate
  "Updating themes from gem source:".say(:green)
  gen(@gen_path, 'themes')

  "Updating data:".say(:green)
  gem_data_files = Dir[File.join(@gem_path, '..', 'gen', 'data', '*')]
  gem_data_files.each do |gem_data_file|
    # get equivalent data file from this rog
    basename = File.basename(gem_data_file)
    "Updating keys for #{basename}".say(:green)
    rog_data_file = File.join(@gen_path, 'data', basename)
    merged_data = Rubyongo::YamlDiff.new(gem_data_file, rog_data_file).combine
    File.write(rog_data_file, merged_data.to_yaml)
  end
end

def theme
  @theme ||= settings['theme'] || 'default'
end

# Run the Panel's backend
def run_rog
  set_env
  "rubyongo ".say(:yellow)
  "theme: #{theme}\n".say(:green)
  require 'rubyongo'
  "Rubyongo #{ENV['RACK_ENV']}".say(:dark_blue)
  Rubyongo::Kit.run!
end

# Deploy this rog site
def deploy_rog
  usr = settings['production']['usr']
  host = settings['production']['host']
  exec("cd sys; ./rogd #{usr} #{host}")
end

# Run deployment install.
def init_rog
  usr = settings['production']['usr']
  host = settings['production']['host']
  provider = "#{usr}@#{host}"
  # cd sys; roginit rubyongo rubyongo.org rubyongo@rubyongo.org:~/rubyongo.org.git rubyongo@rubyongo.org
  exec("cd sys; ./roginit #{usr} #{host} #{provider}:~/#{host}.git #{provider}; ./rogequip #{usr} #{host}; ./roginitcontent #{usr} #{host}")
end

# Equip the remote deployment server.
def equip_rog
  usr = settings['production']['usr']
  host = settings['production']['host']
  exec("cd sys; ./rogequip #{usr} #{host}")
end

# Sync the content.
def content_rog
  usr = settings['production']['usr']
  host = settings['production']['host']
  exec("cd content; git push; cd ../sys; ./rogc #{usr} #{host}")
end

def run_hugo_server
  set_env
  args = "" # TODO: allow passing arguments, which? let's add proper arguments parsing much later, when we know exactly what the CLI interface should do and achieve tasks.
  "rubyongo ".say(:yellow)
  "theme: #{theme}\n".say(:green)

  svelte_path = "themes/#{theme}/svelte"
  if Dir.exists?(svelte_path)
    "theme contains svelte:".say(:green)
    rollup_pids = `pgrep -f rollup`.split("\n")
    watching =  rollup_pids != [Process.pid.to_s] && rollup_pids[0].to_i > 0
    if watching
      "svelte code reloading is on...\n".say(:dark_blue)
    else
      `cd #{svelte_path}; npm install; rollup -c`
      "to get live svelte code reloading, please use another terminal window with the command 'rog sveltedev'\n".say(:green)
    end
  end
  "hugo:".say(:green)
  exec("hugo server #{args}")
end

def run_svelte_rollup(options = '')
  theme = settings['theme']
  exec("cd themes/#{theme}/svelte; npm install; rollup -c#{options}")
end

def run_svelte_rollup_watch
  run_svelte_rollup('w')
end

def version_rog
  "Framework version: #{Rubyongo.version_for(@working_path)}".say(:green)
end

def gem_version
  "Gem version: #{Rubyongo.version}".say(:green)
end

def dodo
  #time = Benchmark.realtime do
    if ['help', '', nil].include? @command
      print_usage
    elsif ['new', 'n'].include? @command
      new_rog(@name, { 'rog-usr' => @rog_usr, 'rog-host' => @rog_host })
    elsif ['start', 's'].include? @command
      run_rog
    elsif ['deploy', 'd'].include? @command
      deploy_rog
    elsif ['init', 'i'].include? @command
      init_rog
    elsif ['upgrade', 'up', 'u'].include? @command
      upgrade_rog(@name, { 'rog-usr' => @rog_usr, 'rog-host' => @rog_host })
    elsif ['themeupdate'].include? @command
      themeupdate
    elsif ['equip', 'e'].include? @command
      equip_rog
    elsif ['content', 'c'].include? @command
      content_rog
    elsif ['hugo', 'h'].include? @command
      run_hugo_server
    elsif ['rollup'].include? @command
      run_svelte_rollup
    elsif ['rollupdev'].include? @command
      run_svelte_rollup_watch
    elsif ['version', 'v'].include? @command
      version_rog
    elsif ['gemversion', 'gv'].include? @command
      gem_version
    else
      print_usage
      "Uknown command: #{@command}".say(:red)
    end
  #end
  #"Realtime: #{time}sec\n".say(:yellow)
end

# run
begin
  dodo
rescue StandardError => e
  "Runtime exception: #{e.message.to_s.blue}\nBacktrace:\n#{print_backtrace(e)}".say(:red)
  print_usage
end
