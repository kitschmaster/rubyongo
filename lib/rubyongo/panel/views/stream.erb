<div class="container">
  <div class="pure-form pure-form-stacked">
    <div class="pure-control-group">
      <label for="title">Title:</label>
      <input id="title" name="title" type="text" placeholder="Title">
    </div>
    <div class="pure-control-group">
      <label for="archetype">Type:</label>
      <select id="archetype" class="pure-input-1-2">
        <option>nothing</option>
        <% current_guru.archetypes.each do |archetype| %>
          <option <% if archetype == 'item' %>selected <% end %>><%= archetype.capitalize %></option>
        <% end %>
      </select>
    </div>
    <p id="done" class="hidden">Upload done.</p>
    <div id="holder"><div class="inner">Tap/Click here for upload</div></div>

    <p id="upload" class="hidden"><label>Drag & drop not supported, but you can still upload via this input field:<br><input multiple id="file" type="file" name="file" style="display: none"></label></p>
    <p id="filereader">File API & FileReader API not supported</p>
    <p id="formdata">XHR2's FormData is not supported</p>
    <p id="progress">XHR2's upload progress isn't supported</p>
    <p id="progressor" class="hidden"><progress id="uploadprogress" max="100" value="0">0</progress></p>
  </div>
</div>

<script>
$("#holder").on("click", function() {
    $("#file").trigger("click");
});


var holder = document.getElementById('holder'),
    tests = {
      filereader: typeof FileReader != 'undefined',
      dnd: 'draggable' in document.createElement('span'),
      formdata: !!window.FormData,
      progress: "upload" in new XMLHttpRequest
    },
    support = {
      filereader: document.getElementById('filereader'),
      formdata: document.getElementById('formdata'),
      progress: document.getElementById('progress')
    },
    acceptedTypes = {
      'image/png': true,
      'image/jpeg': true,
      'image/gif': true
    },
    progress = document.getElementById('uploadprogress'),
    fileupload = document.getElementById('upload');

"filereader formdata progress".split(' ').forEach(function (api) {
  if (tests[api] === false) {
    support[api].className = 'fail';
  } else {
    // FFS. I could have done el.hidden = true, but IE doesn't support
    // hidden, so I tried to create a polyfill that would extend the
    // Element.prototype, but then IE10 doesn't even give me access
    // to the Element object. Brilliant.
    support[api].className = 'hidden';
  }
});

function previewfile(file) {
  if (tests.filereader === true && acceptedTypes[file.type] === true) {
    var reader = new FileReader();
    reader.onload = function (event) {
      var image = new Image();
      image.src = event.target.result;
      image.width = 250; // a fake resize
      holder.innerHTML = '';
      holder.appendChild(image);
    };

    reader.readAsDataURL(file);
  }  else {
    holder.innerHTML += '<p>Uploaded ' + file.name + ' ' + (file.size ? (file.size/1024|0) + 'K' : '');
    console.log(file);
  }
}

function readfiles(files) {
    console.log("readfiles ...")
    var formData = tests.formdata ? new FormData() : null;
    for (var i = 0; i < files.length; i++) {
      if (tests.formdata) {
        formData.append('file', files[i]);
        formData.append('title', $('#title').val());
        formData.append('archetype', $('#archetype').val());
      }
      previewfile(files[i]);
    }

    // now post a new XHR request
    if (tests.formdata) {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', '/stream_editor/in');
      xhr.onload = function() {
        progress.value = progress.innerHTML = 100;
      };

      if (tests.progress) {
        xhr.upload.onprogress = function (event) {
          if (event.lengthComputable) {
            var complete = (event.loaded / event.total * 100 | 0);
            progress.value = progress.innerHTML = complete;
            $('#progressor').removeClass('hidden');
            console.log("xhr.upload.onprogress progress set: " + complete)
          }
        }
      }

      xhr.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            var done = $('#done');
            done.innerHTML = this.responseText;
            done.removeClass('hidden');
            $('#holder .inner').addClass('hidden');
        }
      };

      xhr.send(formData);
    }
}

fileupload.querySelector('input#file').onchange = function () {
  readfiles(this.files);
};

if (tests.dnd) {
  console.log("test.dnd")
  holder.ondragover = function () { this.className = 'hover'; return false; };
  holder.ondragend = function () { this.className = ''; return false; };
  holder.ondrop = function (e) {
    this.className = '';
    e.preventDefault();
    readfiles(e.dataTransfer.files);
  }
} else {
  console.log("else")
  fileupload.className = 'hidden';
}

</script>